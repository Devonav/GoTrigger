import { Component, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { CveService, CVEResponse, CVEItem } from '../../services/cve.service';

@Component({
  selector: 'app-cve-alerts',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './cve-alerts.component.html',
  styleUrls: ['./cve-alerts.component.scss']
})
export class CveAlertsComponent {
  keyword = '';
  isLoading = signal(false);
  errorMessage = signal('');
  cveResult = signal<CVEResponse | null>(null);
  hasSearched = signal(false);
  showLatest = signal(true);

  constructor(
    private cveService: CveService,
    private router: Router
  ) {
    // Load latest CVEs on init
    this.loadLatestCVEs();
  }

  loadLatestCVEs(): void {
    this.isLoading.set(true);
    this.errorMessage.set('');
    this.hasSearched.set(false);
    this.showLatest.set(true);
    this.keyword = '';

    this.cveService.getLatestCVEs(20).subscribe({
      next: (result) => {
        this.cveResult.set(result);
        this.hasSearched.set(true);
        this.isLoading.set(false);
      },
      error: (error) => {
        this.isLoading.set(false);
        this.errorMessage.set(error.error?.error || 'Failed to load CVEs. Please try again.');
        console.error('CVE fetch error:', error);
      }
    });
  }

  searchCVEs(): void {
    if (!this.keyword.trim()) {
      this.errorMessage.set('Please enter a company or product name');
      return;
    }

    this.isLoading.set(true);
    this.errorMessage.set('');
    this.hasSearched.set(false);
    this.showLatest.set(false);

    this.cveService.searchCVEs(this.keyword, 20).subscribe({
      next: (result) => {
        this.cveResult.set(result);
        this.hasSearched.set(true);
        this.isLoading.set(false);
      },
      error: (error) => {
        this.isLoading.set(false);
        this.errorMessage.set(error.error?.error || 'Failed to search CVEs. Please try again.');
        console.error('CVE search error:', error);
      }
    });
  }

  goToDashboard(): void {
    this.router.navigate(['/dashboard']);
  }

  reset(): void {
    this.loadLatestCVEs();
  }

  getCVEDescription(cve: CVEItem): string {
    const desc = cve.cve.descriptions?.find(d => d.lang === 'en');
    return desc?.value || 'No description available';
  }

  getCVESeverity(cve: CVEItem): string {
    const metric = cve.cve.metrics?.cvssMetricV31?.[0];
    return metric?.cvssV3?.baseSeverity || 'UNKNOWN';
  }

  getCVEScore(cve: CVEItem): number {
    const metric = cve.cve.metrics?.cvssMetricV31?.[0];
    return metric?.cvssV3?.baseScore || 0;
  }

  getSeverityColor(severity: string): string {
    switch (severity.toUpperCase()) {
      case 'CRITICAL':
        return '#dc2626'; // Red
      case 'HIGH':
        return '#ea580c'; // Orange
      case 'MEDIUM':
        return '#fbbf24'; // Yellow
      case 'LOW':
        return '#22c55e'; // Green
      default:
        return 'rgba(255, 255, 255, 0.4)'; // Gray
    }
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
}
